"use client";

import { useState } from "react";

interface Produto {
  produto_nome: string;
  tratamento?: string;
  quantidade: number;
  valor_unitario: number;
  status_produto?: string;
  motivo_reprovacao?: string;
}

interface Pedido {
  id: number;
  cliente_nome: string;
  cliente_codigo: string;
  frete: string;
  vl_primeira_parc: number;
  vl_segunda_parc: number;
  produtos: Produto[];
  obs_vendedor?: string;
  cnpj?: string;
  mes_primeiro_pgto?: number;
  mes_segundo_pgto?: number;
}

interface Props {
  pedido: Pedido;
  onClose: () => void;
}

export default function ModalDetalhes({ pedido, onClose }: Props) {
  const meses = ['Janeiro','Fevereiro','Mar√ßo','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'];
  const total = (pedido.produtos || []).reduce((s, p) => s + p.valor_unitario * p.quantidade, 0);

  const [produtosState, setProdutosState] = useState<Produto[]>(pedido.produtos);
  const [statusProdutos, setStatusProdutos] = useState<{ status?: string; loading?: boolean }[]>([]);
  const [motivoReprovacao, setMotivoReprovacao] = useState<string[]>([]);
  const [mostrarMotivo, setMostrarMotivo] = useState<number | null>(null);
  const [acaoAtual, setAcaoAtual] = useState<string[]>([]);
  const algumPendente = produtosState.some((p) => !p.status_produto);

  const getStatusBadgeOuAcoes = (p: Produto, idx: number) => {
    const status = p.status_produto;
    const loading = statusProdutos[idx]?.loading;

    if (status === "aprovado") {
      return <span style={{ backgroundColor: "#d4edda", color: "#155724", padding: "4px 8px", borderRadius: "4px" }}>‚úÖ Aprovado</span>;
    }
    if (status === "reprovado") {
      return (
        <span style={{ backgroundColor: "#f8d7da", color: "#721c24", padding: "4px 8px", borderRadius: "4px" }}>
          ‚ùå Reprovado{p.motivo_reprovacao ? ` ‚Äî ${p.motivo_reprovacao}` : ""}
        </span>
      );
    }
    return (
      <div>
        <button
          disabled={loading}
          onClick={() => handleAcaoProduto(idx, "aprovado")}
          style={{ marginRight: "6px" }}
        >
          {loading && acaoAtual[idx] === "aprovado" ? "‚è≥" : "‚úîÔ∏è"}
        </button>
        <button
          disabled={loading}
          onClick={() => abrirMotivo(idx)}
        >
          {loading && acaoAtual[idx] === "reprovado" ? "‚è≥" : "‚ùå"}
        </button>
      </div>
    );
  };

  const abrirMotivo = (idx: number) => setMostrarMotivo(idx);
  const confirmarMotivo = (idx: number) => {
    setMostrarMotivo(null);
    handleAcaoProduto(idx, "reprovado");
  };

  const handleAcaoProduto = async (idx: number, status: "aprovado" | "reprovado") => {
    const produto = produtosState[idx];
    const payload = {
      id_pedido: pedido.id,
      item: idx + 1,
      status,
      produto_codigo: produto.produto_nome,
      mensagem: status === "reprovado" ? motivoReprovacao[idx] : ""
    };

    setStatusProdutos((prev) => {
      const copia = [...prev];
      copia[idx] = { loading: true };
      return copia;
    });

    setAcaoAtual((prev) => {
      const copia = [...prev];
      copia[idx] = status;
      return copia;
    });

    try {
      const response = await fetch("/api/pedidos-aprovacao", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
      });

      if (!response.ok) throw new Error("Erro ao registrar");

      setStatusProdutos((prev) => {
        const copia = [...prev];
        copia[idx] = { status };
        return copia;
      });

      setProdutosState((prev) => {
        const copia = [...prev];
        copia[idx] = { ...copia[idx], status_produto: status };
        return copia;
      });

      window.dispatchEvent(new Event("refreshPedidos"));
    } catch (err) {
      console.error("Erro ao enviar a√ß√£o:", err);
      alert("Erro ao registrar aprova√ß√£o/reprova√ß√£o. Tente novamente.");
      setStatusProdutos((prev) => {
        const copia = [...prev];
        copia[idx] = {};
        return copia;
      });
    }
  };

  return (
    <div style={{ position: "fixed", top: 0, left: 0, width: "100%", height: "100%", backgroundColor: "rgba(0,0,0,0.5)", display: "flex", justifyContent: "center", alignItems: "center", zIndex: 1000 }}>
      <div style={{ backgroundColor: "#fff", borderRadius: "12px", width: "90%", maxWidth: "900px", maxHeight: "90vh", overflowY: "auto", boxShadow: "0 4px 12px rgba(0,0,0,0.3)" }}>
        <div style={{ background: "linear-gradient(to right, #1e4321, #47763b)", color: "white", padding: "1rem 1.5rem", borderTopLeftRadius: "12px", borderTopRightRadius: "12px", display: "flex", justifyContent: "space-between", alignItems: "center" }}>
          <h5 style={{ margin: 0 }}>Detalhes do Pedido</h5>
          <button onClick={() => {
            if (algumPendente) {
              alert("Voc√™ precisa aprovar ou reprovar todos os itens antes de fechar.");
              return;
            }
            onClose();
          }} style={{ background: "none", border: "none", fontSize: "1.5rem", color: "white", cursor: "pointer" }}>√ó</button>
        </div>

        <div style={{ padding: "1.5rem", display: "flex", flexDirection: "column", gap: "1.5rem" }}>
          <div style={{ border: "1px solid #28a745", borderRadius: "10px", padding: "1rem" }}>
            <p><strong>üë§ Cliente:</strong> {pedido.cliente_nome} ({pedido.cliente_codigo})</p>
            {pedido.cnpj && <p><strong>üßæ CNPJ/CPF:</strong> {pedido.cnpj}</p>}
            <p><strong>üöö Frete:</strong> {pedido.frete}</p>
          </div>

          <div style={{ border: "1px solid #28a745", borderRadius: "10px", padding: "1rem" }}>
            <p><strong>üí∞ Pagamento:</strong></p>
            {pedido.vl_segunda_parc === 0 ? (
              <p>‚Ä¢ Parcela √önica: {pedido.vl_primeira_parc.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })} {pedido.mes_primeiro_pgto ? `em ${meses[pedido.mes_primeiro_pgto - 1]}` : ""}</p>
            ) : (
              <>
                <p>1¬™ Parcela: {pedido.vl_primeira_parc.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })} {pedido.mes_primeiro_pgto ? `em ${meses[pedido.mes_primeiro_pgto - 1]}` : ""}</p>
                <p>2¬™ Parcela: {pedido.vl_segunda_parc.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })} {pedido.mes_segundo_pgto ? `em ${meses[pedido.mes_segundo_pgto - 1]}` : ""}</p>
              </>
            )}
            <p style={{ fontWeight: "bold", color: "#1e4321", marginTop: "1rem" }}>
              ‚Ä¢ üü¢ Total do Pedido: {total.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}
            </p>
          </div>

          <div style={{ border: "1px solid #28a745", borderRadius: "10px", padding: "1rem" }}>
            <p><strong>üì¶ Produtos:</strong></p>
            <div className="produtos-desktop">
              <table style={{ width: "100%", borderCollapse: "collapse" }}>
                <thead style={{ background: "linear-gradient(to right, #2f5a32, #1e4321)", color: "white" }}>
                  <tr>
                    <th style={{ padding: "10px", border: "1px solid #1e4321" }}>Produto</th>
                    <th style={{ padding: "10px", border: "1px solid #1e4321" }}>Qtd</th>
                    <th style={{ padding: "10px", border: "1px solid #1e4321" }}>Valor Unit</th>
                    <th style={{ padding: "10px", border: "1px solid #1e4321" }}>Status</th>
                  </tr>
                </thead>
                <tbody>
                  {produtosState.map((p, idx) => (
                    <tr key={idx}>
                      <td style={{ padding: "8px" }}>{p.produto_nome} {p.tratamento && `(${p.tratamento})`}</td>
                      <td style={{ padding: "8px" }}>{p.quantidade}</td>
                      <td style={{ padding: "8px" }}>{p.valor_unitario.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}</td>
                      <td style={{ padding: "8px" }}>{getStatusBadgeOuAcoes(p, idx)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="produtos-mobile">
              {produtosState.map((p, idx) => (
                <div key={idx} style={{ border: "1px solid #ccc", borderRadius: "8px", padding: "0.75rem", marginBottom: "0.75rem" }}>
                  <p style={{ margin: 0, fontWeight: "bold" }}>üì¶ {p.produto_nome} {p.tratamento && `(${p.tratamento})`}</p>
                  <p style={{ margin: "4px 0" }}><strong>Qtd:</strong> {p.quantidade}</p>
                  <p style={{ margin: "4px 0" }}><strong>Valor Unit:</strong> {p.valor_unitario.toLocaleString("pt-BR", { style: "currency", currency: "BRL" })}</p>
                  <div style={{ marginTop: "8px" }}>{getStatusBadgeOuAcoes(p, idx)}</div>
                </div>
              ))}
            </div>

            {mostrarMotivo !== null && (
              <div style={{ marginTop: "1rem" }}>
                <label>Motivo da Reprova√ß√£o:</label>
                <textarea
                  style={{ width: "100%", minHeight: "60px", padding: "8px", borderRadius: "6px", border: "1px solid #ccc" }}
                  value={motivoReprovacao[mostrarMotivo] || ""}
                  onChange={(e) => {
                    const nova = [...motivoReprovacao];
                    nova[mostrarMotivo] = e.target.value;
                    setMotivoReprovacao(nova);
                  }}
                />
                <button onClick={() => confirmarMotivo(mostrarMotivo)} style={{ marginTop: "8px", padding: "6px 12px", backgroundColor: "#dc3545", color: "white", border: "none", borderRadius: "4px", cursor: "pointer" }}>
                  Enviar Reprova√ß√£o
                </button>
              </div>
            )}
          </div>

          <div style={{ border: "1px solid #28a745", borderRadius: "10px", padding: "1rem" }}>
            <strong style={{ color: "#1e4321" }}>üìù Observa√ß√£o do Vendedor:</strong>
            <p style={{ marginTop: "0.5rem" }}>{pedido.obs_vendedor?.trim() || "Nenhuma observa√ß√£o registrada."}</p>
          </div>
        </div>
      </div>
      <style>{`
        @media (max-width: 600px) {
          .produtos-desktop { display: none !important; }
          .produtos-mobile { display: block !important; }
        }
        @media (min-width: 601px) {
          .produtos-desktop { display: block !important; }
          .produtos-mobile { display: none !important; }
        }
      `}</style>
    </div>
  );
}